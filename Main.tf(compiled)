terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = ">=4.5.0"
    }
  }
}

provider "aws" {
  # Configuration options
}

resource "aws_vpc" "prod-vpc-project16" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "My VPC"
  }
}



resource "aws_elb" "web_elb-project16" {
  name = "web-elb-project16"
  security_groups = [
    aws_security_group.sglb-project16.id
  ]
  subnets = [
    aws_subnet.prod-subnet-public-1.id,
    aws_subnet.prod-subnet-public-2.id
  ]

  cross_zone_load_balancing   = true

  health_check {
    healthy_threshold = 2
    unhealthy_threshold = 2
    timeout = 3
    interval = 30
    target = "HTTP:80/"
  }

  listener {
    lb_port = 80
    lb_protocol = "http"
    instance_port = "80"
    instance_protocol = "http"
  }

}


resource "aws_subnet" "prod-subnet-public-1" {
  vpc_id                  = aws_vpc.prod-vpc-project16.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = "true" //it makes this a public subnet
  availability_zone       = "us-east-1a"
  tags = {
    Name = "prod-subnet-public-1"
  }
}

resource "aws_subnet" "prod-subnet-public-2" {
  vpc_id                  = aws_vpc.prod-vpc-project16.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = "true" //it makes this a public subnet
  availability_zone       = "us-east-1b"
  tags = {
    Name = "prod-subnet-public-2"
  }
}

resource "aws_subnet" "private_subnet1" {
  vpc_id                  = aws_vpc.prod-vpc-project16.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = "false" //makes this private subnet
  tags = {
    Name = "private_subnet1"
  }
}

resource "aws_subnet" "private_subnet2" {
  vpc_id                  = aws_vpc.prod-vpc-project16.id
  cidr_block              = "10.0.4.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = "false" //makes this private subnet
  tags = {
    Name = "private_subnet2"
  }
}

# Create RDS Subnet group
resource "aws_db_subnet_group" "project16" {
  name        = "project16-rds-subnet-group"
  description = "Database subnet groups"
  subnet_ids  = ["${aws_subnet.private_subnet1.id}", "${aws_subnet.private_subnet2.id}"]
}

resource "aws_db_instance" "project16" {
  allocated_storage    = 10
  engine               = "mysql"
  engine_version       = "5.7"
  instance_class       = "db.t2.micro"
  db_subnet_group_name = aws_db_subnet_group.project16.id
  db_name              = "test"
  username             = "test"
  password             = "testtest"
  skip_final_snapshot    = "true"
 }

resource "aws_internet_gateway" "my_vpc_igw" {
  vpc_id = aws_vpc.prod-vpc-project16.id

  tags = {
    Name = "My VPC - Internet Gateway"
  }
}

resource "aws_route_table" "my_vpc_us_east_1_public" {
  vpc_id = aws_vpc.prod-vpc-project16.id

  route {
    cidr_block = "0.0.0.0/24"
    gateway_id = aws_internet_gateway.my_vpc_igw.id
  }

  tags = {
    Name = "Public Subnet Route Table."
  }
}

resource "aws_route_table" "my_vpc_us_east_1_private" {
  vpc_id = aws_vpc.prod-vpc-project16.id

  route {
    cidr_block = "0.0.0.0/24"
    gateway_id = aws_internet_gateway.my_vpc_igw.id
  }

  tags = {
    Name = "private Subnet Route Table."
  }
}

resource "aws_route_table_association" "my_vpc_us_east_1_public1" {
  subnet_id      = aws_subnet.prod-subnet-public-1.id
  route_table_id = aws_route_table.my_vpc_us_east_1_public.id
}

resource "aws_route_table_association" "my_vpc_us_east_1_public2" {
  subnet_id      = aws_subnet.prod-subnet-public-2.id
  route_table_id = aws_route_table.my_vpc_us_east_1_public.id
}

resource "aws_route_table_association" "my_vpc_us_east_1_private1" {
  subnet_id      = aws_subnet.private_subnet1.id
  route_table_id = aws_route_table.my_vpc_us_east_1_private.id
}

resource "aws_route_table_association" "my_vpc_us_east_1_private2" {
  subnet_id      = aws_subnet.private_subnet2.id
  route_table_id = aws_route_table.my_vpc_us_east_1_private.id
}

resource "aws_security_group" "allow_ssh-project16" {
  name        = "allow_ssh_sg-project16"
  description = "Allow SSH inbound connections"
  vpc_id      = aws_vpc.prod-vpc-project16.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_ssh_sg-project16"
  }
}

resource "aws_security_group" "allow_http-project16" {
  name        = "allow_http_sg-project16"
  description = "Allow http inbound connections"
  vpc_id      = aws_vpc.prod-vpc-project16.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_http_sg-project16"
  }
}



resource "aws_security_group" "sglb-project16" {
  name        = "sglb-project16"
  description = "Allow 80 to public subnet resources"
  vpc_id = aws_vpc.prod-vpc-project16.id
  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
   cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "sglb-project16-allow-https-ssh"
  }
    lifecycle {
    create_before_destroy = true
  }
}
